{"version":3,"file":"static/js/806.21486744.chunk.js","mappings":"6RAEaA,EAAeC,EAAAA,GAAAA,EAAH,iHAMZC,EAAeD,EAAAA,GAAAA,GAAH,iH,SCsCzB,EAvCgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE+BC,EAAAA,EAAAA,IAAgBN,GAF/C,OAEUG,EAFV,OAIIC,EAAgBD,GAJpB,iDAMII,EAAAA,EAAAA,IAAM,KAAMC,SANhB,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACT,IAECG,EAIL,OACE,2BAC2B,IAAxBA,EAAaO,SACZ,qEAEF,wBACGP,EAAaQ,KAAI,SAAAC,GAAM,OACtB,2BACE,UAACb,EAAD,sBAAuBa,EAAOC,WAC9B,UAAChB,EAAD,eAAgBe,EAAOE,QAAvB,SAFOF,EAAOG,GADM,QAS/B,C,kMCzCKC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,sCAAyCF,IAF7D,UAGkC,KAD/BG,EAFH,QAGUC,KAAKC,QAAQX,OAHvB,sBAIKY,MAAM,kDAJX,gCAMIH,EAASC,KAAKC,SANlB,oCAQC,KAAME,UAAW,KAAMJ,SARxB,uBASKG,MAAM,kDATX,mGAiBA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBP,EAAAA,EAAAA,IAAA,gCAAmCF,EAAnC,kBAAoDS,EAApD,yBAFpB,WAEGN,EAFH,QAGWC,KAAKC,QAAQX,OAHxB,sBAIKY,MAAM,iDAJX,gCAMIH,EAASC,KAAKC,SANlB,sCAQC,KAAME,UAAW,KAAMJ,SARxB,uBASKG,MAAM,kDATX,oGAiBA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+B1B,GAA/B,gGAEoBkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,4BAA+CgB,IAFnE,WAEGG,EAFH,QAGWC,KAAKO,KAAKjB,OAHrB,sBAIKY,MAAM,gDAJX,gCAMIH,EAASC,KAAKO,MANlB,sCAQC,KAAMJ,UAAW,KAAMJ,SARxB,uBASKG,MAAM,kDATX,oGAkBC,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+B5B,GAA/B,gGAEmBkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,oBAAuCgB,IAF1D,UAGyB,KADvBG,EAFF,QAGSC,KAAKV,OAHd,sBAIIY,MAAM,iDAJV,gCAMGH,EAASC,MANZ,sCAQA,KAAMG,UAAW,KAAMJ,SARvB,uBASIG,MAAM,kDATV,oGAiBD,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,gGAEoBkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,4BAA+CgB,IAFnE,WAEGG,EAFH,QAGWC,KAAKC,QAAQX,OAHxB,sBAIKY,MAAM,kDAJX,gCAMIH,EAASC,KAAKC,SANlB,sCAQC,KAAME,UAAW,KAAMJ,SARxB,uBASKG,MAAM,kDATX,oGAvEPJ,EAAAA,EAAAA,SAAAA,QAHiB,8B","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","servises/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ParagraphRev = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  margin-bottom: 20px;\n  padding-left: 100px;\n`;\nexport const TitleReviews = styled.h2`\n  font-size: 20px;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  padding-left: 100px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { getMovieReviews } from 'servises/movieApi';\nimport { ParagraphRev, TitleReviews } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n\n  useEffect(() => {\n    async function fetchMovieReviews() {\n      try {\n        const movieReviews = await getMovieReviews(movieId);\n\n        setMovieReviews(movieReviews);\n      } catch (error) {\n        toast(error.message);\n      }\n    }\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (!movieReviews) {\n    return;\n  }\n\n  return (\n    <div>\n      {movieReviews.length === 0 && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n      <ul>\n        {movieReviews.map(review => (\n          <li key={review.id}>\n            <TitleReviews>Author: {review.author}</TitleReviews>\n            <ParagraphRev> {review.content} </ParagraphRev>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '53391f0255c4ebe5a2e85a821642826a';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getMoviesTrending(){\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    if (response.data.results.length === 0) {\n      throw Error('Sorry, but nothing was found for your request!');\n    }\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMoviesSearch(query) {\n  try {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`);\n    if (!response.data.results.length) {\n      throw Error('Sorry, no movies were found for your request!')\n    };\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n    if (!response.data.cast.length) {\n      throw Error('Sorry, no casts were found for your request!')\n    };\n    return response.data.cast;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\n\n export async function getMovieDetails(movieId) {\n   try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    if (response.data.length === 0) {\n      throw Error('Sorry, no movies were found for your request!')\n    };\n    return response.data;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    if (!response.data.results.length) {\n      throw Error('Sorry, no reviews were found for your request!')\n    };\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\n"],"names":["ParagraphRev","styled","TitleReviews","movieId","useParams","useState","movieReviews","setMovieReviews","useEffect","getMovieReviews","toast","message","fetchMovieReviews","length","map","review","author","content","id","API_KEY","getMoviesTrending","axios","response","data","results","Error","request","getMoviesSearch","query","getMovieCredits","cast","getMovieDetails"],"sourceRoot":""}