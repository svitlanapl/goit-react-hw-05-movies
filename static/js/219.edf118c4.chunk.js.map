{"version":3,"file":"static/js/219.edf118c4.chunk.js","mappings":"0SAEaA,EAAWC,EAAAA,GAAAA,GAAH,qJAQRC,EAAWD,EAAAA,GAAAA,GAAH,qEAKRE,EAAYF,EAAAA,GAAAA,IAAH,yFAMTG,EAAWH,EAAAA,GAAAA,EAAH,oE,SC8BrB,EA1Ca,WACX,IAEQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4BC,EAAAA,EAAAA,IAAgBN,GAF5C,OAEUG,EAFV,OAIIC,EAAaD,GAJjB,iDAMII,EAAAA,EAAAA,IAAM,KAAMC,SANhB,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACT,IAECG,EAIL,OACE,SAACR,EAAD,UACGQ,EAAUO,KAAI,SAAAC,GAAI,OACjB,UAACd,EAAD,YACE,SAACC,EAAD,CACEc,IACED,EAAKE,aA7BA,kCA6B0BF,EAAKE,aAAeC,EAErDC,IAAKJ,EAAKK,QAEZ,SAACjB,EAAD,UAAWY,EAAKK,QAChB,UAACjB,EAAD,yBAAsBY,EAAKM,UAA3B,SARaN,EAAKO,GADH,KAcxB,C,kMC9CKC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,sCAAyCF,IAF7D,UAGkC,KAD/BG,EAFH,QAGUC,KAAKC,QAAQC,OAHvB,sBAIKC,MAAM,kDAJX,gCAMIJ,EAASC,KAAKC,SANlB,oCAQC,KAAMG,UAAW,KAAML,SARxB,uBASKI,MAAM,kDATX,mGAiBA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBR,EAAAA,EAAAA,IAAA,gCAAmCF,EAAnC,kBAAoDU,EAApD,yBAFpB,WAEGP,EAFH,QAGWC,KAAKC,QAAQC,OAHxB,sBAIKC,MAAM,iDAJX,gCAMIJ,EAASC,KAAKC,SANlB,sCAQC,KAAMG,UAAW,KAAML,SARxB,uBASKI,MAAM,kDATX,oGAiBA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,gGAEoBqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,4BAA+CmB,IAFnE,WAEGG,EAFH,QAGWC,KAAKZ,KAAKc,OAHrB,sBAIKC,MAAM,gDAJX,gCAMIJ,EAASC,KAAKZ,MANlB,sCAQC,KAAMgB,UAAW,KAAML,SARxB,uBASKI,MAAM,kDATX,oGAkBC,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+B9B,GAA/B,gGAEmBqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,oBAAuCmB,IAF1D,UAGyB,KADvBG,EAFF,QAGSC,KAAKE,OAHd,sBAIIC,MAAM,iDAJV,gCAMGJ,EAASC,MANZ,sCAQA,KAAMI,UAAW,KAAML,SARvB,uBASII,MAAM,kDATV,oGAiBD,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+B/B,GAA/B,gGAEoBqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,4BAA+CmB,IAFnE,WAEGG,EAFH,QAGWC,KAAKC,QAAQC,OAHxB,sBAIKC,MAAM,kDAJX,gCAMIJ,EAASC,KAAKC,SANlB,sCAQC,KAAMG,UAAW,KAAML,SARxB,uBASKI,MAAM,kDATX,oGAvEPL,EAAAA,EAAAA,SAAAA,QAHiB,8B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","servises/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  padding: 10px 0;\n  text-decoration: none;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  padding-top: 30px;\n  padding-left: 80px;\n`;\n\nexport const CastImage = styled.img`\n  padding-bottom: 10px;\n  width: 500px;\n  border-radius: 5px;\n`;\n\nexport const CastText = styled.p`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { getMovieCredits } from 'servises/movieApi';\nimport defaultPoster from 'image/poster.png';\n\nimport { CastList, CastItem, CastImage, CastText } from './Cast.styled';\n\nconst Cast = () => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        const movieCast = await getMovieCredits(movieId);\n\n        setMovieCast(movieCast);\n      } catch (error) {\n        toast(error.message);\n      }\n    }\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <CastList>\n      {movieCast.map(cast => (\n        <CastItem key={cast.id}>\n          <CastImage\n            src={\n              cast.profile_path ? BASE_URL + cast.profile_path : defaultPoster\n            }\n            alt={cast.name}\n          />\n          <CastText>{cast.name}</CastText>\n          <CastText>Character: {cast.character} </CastText>\n        </CastItem>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '53391f0255c4ebe5a2e85a821642826a';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getMoviesTrending(){\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    if (response.data.results.length === 0) {\n      throw Error('Sorry, but nothing was found for your request!');\n    }\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMoviesSearch(query) {\n  try {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`);\n    if (!response.data.results.length) {\n      throw Error('Sorry, no movies were found for your request!')\n    };\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n    if (!response.data.cast.length) {\n      throw Error('Sorry, no casts were found for your request!')\n    };\n    return response.data.cast;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\n\n export async function getMovieDetails(movieId) {\n   try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    if (response.data.length === 0) {\n      throw Error('Sorry, no movies were found for your request!')\n    };\n    return response.data;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    if (!response.data.results.length) {\n      throw Error('Sorry, no reviews were found for your request!')\n    };\n    return response.data.results;\n  } catch (error) {\n    if (error.request || error.response) {\n      throw Error('Sorry, something went wrong, please try again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\n\n"],"names":["CastList","styled","CastItem","CastImage","CastText","movieId","useParams","useState","movieCast","setMovieCast","useEffect","getMovieCredits","toast","message","fetchMovieCast","map","cast","src","profile_path","defaultPoster","alt","name","character","id","API_KEY","getMoviesTrending","axios","response","data","results","length","Error","request","getMoviesSearch","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}